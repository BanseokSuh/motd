##env:
##  AWS_REGION: ap-northeast-2
##  AWS_S3_BUCKET: motd-bucket-v1
##  AWS_CODE_DEPLOY_APPLICATION: motd-cicd-CD
##  AWS_CODE_DEPLOY_GROUP: motd-cicd-CD-group
#
#name: MOTD CI/CD
#run-name: ${{ github.actor }} is deploying MOTD
#on:
#  push:
#    branches: [ "main" ]
#  pull_request:
#    branches: [ "main" ]
#
#jobs:
#  CI-CD:
#    runs-on: ubuntu-22.04
#    steps:
#      - name: main 브랜치로 이동
#        uses: actions/checkout@v4
#        with:
#          ref: main
#
#      # Java 21 세팅
#      - name: JDK 21 설치
#        uses: actions/setup-java@v4
#        with:
#          java-version: '21'
#          distribution: 'corretto'
#
#      # gradle caching (빌드 시간 줄이기)
#      - name: Gradle Caching
#        uses: actions/cache@v4
#        with:
#          path: |
#            ~/.gradle/caches
#            ~/.gradle/wrapper
#          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
#          restore-keys: |
#            ${{ runner.os }}-gradle-
#
#      # 환경별 yml 파일 생성 - prod
#      - name: make application-prod.yml
#        if: contains(github.ref, 'main')
#        run: |
#          cd ./src/main/resources
#          touch ./application.yml
#          touch ./application-test.yml
#          touch ./application-prod.yml
#          echo "${{ secrets.APPLICATION_YML }}" | base64 --decode > src/main/resources/application.yml
#          echo "${{ secrets.APPLICATION_TEST_YML }}" | base64 --decode > src/main/resources/application-test.yml
#          echo "${{ secrets.APPLICATION_PROD_YML }}" | base64 --decode > src/main/resources/application-prod.yml
#        shell: bash
#
#      # gradle chmod
#      - name: Grant execute permission for gradlew
#        run: chmod +x gradlew
#
#      # gradle build
#      - name: Build with Gradle
#        run: ./gradlew clean build -x test
#
#      # docker login
#      - name: Docker Hub Login
#        uses: docker/login-action@v4
#        with:
#          username: ${{ secrets.DOCKER_USERNAME }}
#          password: ${{ secrets.DOCKER_PASSWORD }}
#
#      # docker build & push to production
#      - name: Docker build & push to prod
#        if: contains(github.ref, 'main')
#        run: |
#          docker build -f Dockerfile -t ${{ secrets.DOCKER_REPO }}/motd .
#          docker push ${{ secrets.DOCKER_REPO }}/motd
#
#      # deploy to production
#      - name: Deploy to prod
#        uses: appleboy/ssh-action@master
#        id: deploy-prod
#        if: contains(github.ref, 'main')
#        with:
#          host: ${{ secrets.HOST_PROD }} # EC2 퍼블릭 IPv4 DNS
#          username: ubuntu
#          key: ${{ secrets.PRIVATE_KEY }}
#          envs: GITHUB_SHA
#          script: |
#            sudo docker ps
#            sudo docker rm -f $(docker ps -qa)
#            sudo docker pull ${{ secrets.DOCKER_REPO }}/motd
#            sudo docker run -d -p 8080:8080 ${{ secrets.DOCKER_REPO }}/motd
#            sudo docker image prune -f
#
#
